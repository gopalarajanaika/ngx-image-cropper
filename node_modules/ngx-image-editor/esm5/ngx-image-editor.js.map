{
  "version": 3,
  "file": "ngx-image-editor.js",
  "sources": [
    "ng://ngx-image-editor/out/ngx-image-editor.module.ts",
    "ng://ngx-image-editor/out/ngx-image-editor.component.ts"
  ],
  "sourcesContent": [
    "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxImageEditorComponent} from './ngx-image-editor.component';\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\nimport {\n    MatAutocompleteModule,\n    MatButtonModule, MatButtonToggleModule, MatIconModule, MatInputModule, MatMenuModule, MatProgressSpinnerModule,\n    MatSliderModule,MatDialogModule,\n    MatTabsModule, MatTooltipModule\n} from \"@angular/material\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n\nexport * from './ngx-image-editor.component';\n\n@NgModule({\n\n    imports: [\n        FormsModule,\n        BrowserAnimationsModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        MatInputModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        MatTabsModule,\n        MatTooltipModule,\n        MatButtonToggleModule,\n        MatSliderModule,\n        MatAutocompleteModule\n    ],\n    declarations: [\n        NgxImageEditorComponent\n    ],\n    exports: [NgxImageEditorComponent]\n})\n\n\nexport class NgxImageEditorModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: NgxImageEditorModule,\n        };\n    }\n}\n",
    "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\ndeclare const Cropper: any;\n\n@Component({\n  selector: 'ngx-image-editor',\n  template: `\n      <div class=\"ngx-image-editor-component\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\">\n          <div mat-dialog-title class=\"photo-editor-header\">\n              <mat-icon>photo</mat-icon>\n              <div class=\"file-name\">{{state.ImageName}}</div>\n              <button [hidden]=\"croppedImage\" mat-icon-button color=\"accent\" matTooltip=\"Crop image\"\n                      (click)=\"handleCrop()\">\n                  <mat-icon>crop</mat-icon>\n              </button>\n              <button mat-icon-button\n                      [hidden]=\"croppedImage\"\n                      color=\"accent\"\n                      matTooltip=\"Center canvas\"\n                      (click)=\"centerCanvas()\">\n                  <mat-icon>center_focus_strong</mat-icon>\n              </button>\n          </div>\n\n          <div mat-dialog-content\n               #dialogCropContainer\n               class=\"dialog-crop-container\"\n               fxLayout=\"column\"\n               fxLayoutAlign=\"center center\"\n               fxFlex=\"grow\">\n              <ng-template [ngIf]=\"!croppedImage\">\n                  <div\n                          [style.visibility]=\"loading ? 'hidden' : 'visible'\"\n                          [style.background]=\"canvasFillColor\"\n                          class=\"img-container\">\n                      <img #previewimg\n                           [src]=\"previewImageURL\">\n                  </div>\n              </ng-template>\n              <ng-template [ngIf]=\"croppedImage && !loading\">\n                  <div class=\"cropped-image\">\n                      <img #croppedImg\n                           [ngStyle]=\"{'transform': 'scale(' + zoomIn + ')'}\"\n                           [src]=\"croppedImage\">\n                  </div>\n              </ng-template>\n              <mat-progress-spinner *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-spinner>\n          </div>\n\n          <div\n                  class=\"dialog-button-actions\"\n                  mat-dialog-actions\n                  fxLayout=\"column\"\n                  align=\"start\"\n                  fxFlex=\"nogrow\">\n\n              <div class=\"image-detail-toolbar\" fxFlex=\"100\">\n                  <div class=\"image-dimensions\"><b>Width:</b> <span>{{imageWidth}}px</span> <b>Height:</b> <span>{{imageHeight}}px</span></div>\n                  <span fxFlex></span>\n                  <div class=\"image-zoom\">\n                      <button mat-icon-button color=\"accent\" (click)=\"zoomChange(0.1, 'zoomIn')\">\n                          <mat-icon>zoom_in</mat-icon>\n                      </button>\n                      <mat-slider [value]=\"sliderValue\" (input)=\"zoomChange($event.value)\" thumbLabel></mat-slider>\n                      <button mat-icon-button color=\"accent\" (click)=\"zoomChange(-0.1, 'zoomOut')\">\n                          <mat-icon>zoom_out</mat-icon>\n                      </button>\n                  </div>\n              </div>\n              <div class=\"cropped-image-buttons\" [style.visibility]=\"!croppedImage ? 'hidden' : 'visible'\">\n                  <button mat-raised-button color=\"accent\" (click)=\"saveImage()\">\n                      <mat-icon>done</mat-icon>\n                      <span>Save</span>\n                  </button>\n                  <button mat-raised-button color=\"accent\" (click)=\"undoCrop()\">\n                      <mat-icon>undo</mat-icon>\n                      <span>Undo</span>\n                  </button>\n              </div>\n              <div fxLayout=\"row\" [style.visibility]=\"croppedImage ? 'hidden' : 'visible'\">\n                  <mat-button-toggle-group\n                          #dragMode=\"matButtonToggleGroup\"\n                          (change)=\"cropper.setDragMode($event.value)\"\n                          value=\"move\">\n                      <mat-button-toggle value=\"move\" matTooltip=\"Move mode\">\n                          <mat-icon>open_with</mat-icon>\n                      </mat-button-toggle>\n                      <mat-button-toggle value=\"crop\" matTooltip=\"Crop mode\">\n                          <mat-icon>crop</mat-icon>\n                      </mat-button-toggle>\n                  </mat-button-toggle-group>\n\n                  <mat-button-toggle-group\n                          #selectRatio=\"matButtonToggleGroup\"\n                          (change)=\"setRatio($event.value)\"\n                          value=\"{{ratios[0].value}}\">\n                      <mat-button-toggle *ngFor=\"let ratio of ratios\" value=\"{{ratio.value}}\" matTooltip=\"Aspect ratio\">\n                          {{ratio.text}}\n                      </mat-button-toggle>\n                  </mat-button-toggle-group>\n\n              </div>\n              <div\n                      class=\"canvas-config\"\n                      fxLayout=\"row\"\n                      fxLayoutAlign=\"start space-between\"\n                      fxLayoutGap=\"10px\"\n                      [style.visibility]=\"croppedImage ? 'hidden' : 'visible'\">\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"imageWidth\"\n                             placeholder=\"Canvas width\"\n                             type=\"number\"\n                             (ngModelChange)=\"setImageWidth($event)\"\n                             [ngModel]=\"canvasWidth\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"imageHeight\"\n                             placeholder=\"Canvas height\"\n                             type=\"number\"\n                             (ngModelChange)=\"setImageHeight($event)\"\n                             [ngModel]=\"canvasHeight\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"cropBoxWidth\"\n                             placeholder=\"Cropbox width\"\n                             type=\"number\"\n                             (ngModelChange)=\"setCropBoxWidth($event)\"\n                             [ngModel]=\"cropBoxWidth\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"cropBoxHeight\"\n                             placeholder=\"Cropbox height\"\n                             type=\"number\"\n                             (ngModelChange)=\"setCropBoxHeight($event)\"\n                             [ngModel]=\"cropBoxHeight\">\n                  </mat-form-field>\n\n                  <!--<md2-colorpicker [(ngModel)]=\"canvasFillColor\"  placeholder=\"Canvas color\"></md2-colorpicker>-->\n\n              </div>\n          </div>\n\n      </div>\n\n  `,\n  styles: [`\n\n      .ngx-image-editor-component .photo-editor-header {\n          display: flex;\n          justify-content: space-around;\n          align-items: center;\n          width: 100%;\n          padding: 5px 0;\n          z-index: 100;\n          margin: 0;\n      }\n\n      .ngx-image-editor-component .photo-editor-header > .mat-icon {\n          padding: 0 10px;\n      }\n\n      .ngx-image-editor-component .photo-editor-header > .file-name {\n          flex: 1 1 100%;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          overflow: hidden;\n      }\n\n      .ngx-image-editor-component mat-progress-spinner {\n          position: absolute;\n      }\n\n      .ngx-image-editor-component .dialog-crop-container {\n          width: 800px;\n          height: 400px;\n          overflow: hidden;\n      }\n\n      .ngx-image-editor-component .cropper-bg {\n          background-image: none !important;\n      }\n\n      .ngx-image-editor-component .cropper-bg > .cropper-modal {\n          opacity: 1 !important;\n          background: none;\n      }\n\n      .ngx-image-editor-component .img-container {\n          width: 800px !important;\n          height: 400px !important;\n      }\n\n      .ngx-image-editor-component .cropped-image img {\n          width: auto !important;\n          height: auto !important;\n          max-width: 800px !important;\n          max-height: 400px !important;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions {\n          position: relative;\n          padding: 0;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions:last-child {\n          margin: 0;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions > DIV mat-button-toggle-group {\n          margin: 20px;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions .cropped-image-buttons {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .ngx-image-editor-component .dialog-button-actions > .canvas-config {\n          padding: 5px;\n          margin: 0 20px;\n      }\n\n      \n\n      .ngx-image-editor-component .dialog-button-actions > .canvas-config md2-colorpicker {\n          width: 200px !important;\n      }\n      \n\n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-zoom {\n          display: flex;\n          align-items: center;\n          padding: 0 10px;\n      }\n      \n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-zoom .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb-container {\n          cursor: grab;\n      }\n      \n\n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-dimensions {\n          padding: 0 10px;\n          font-size: 14px;\n          width: 200px;\n          max-width: 200px;\n      }\n\n   \n\n\n\n\n\n\n\n\n\n\n  `],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class NgxImageEditorComponent implements AfterViewInit, OnInit, OnDestroy {\n\n  public state: EditorOptions;\n  public cropper: any;\n  public croppedImage: string;\n  public imageWidth: number;\n  public imageHeight: number;\n  public canvasWidth: number;\n  public canvasHeight: number;\n  public cropBoxWidth: number;\n  public cropBoxHeight: number;\n  public canvasFillColor: string;\n  public blob: Blob;\n  public loading: boolean;\n  private zoomIn: number;\n  public sliderValue: number;\n  public ratios: NgxAspectRatio[];\n  public previewImageURL: any;\n\n  @ViewChild('previewimg')\n  public previewImage: any;\n\n  @ViewChild('croppedImg')\n  public croppedImg: any;\n\n  @Input()\n  public set config(config: EditorOptions) {\n    this.state = config;\n  }\n\n  @Output()\n  public file: EventEmitter<File> = new EventEmitter<File>();\n\n  public constructor() {\n    this.zoomIn          = 0;\n    this.sliderValue     = 0;\n    this.loading         = true;\n    this.canvasFillColor = '#fff';\n    this.state           = new EditorOptions();\n  }\n\n  public ngOnInit() {\n    this.handleStateConfig();\n  }\n\n  public ngOnDestroy() {\n    this.cropper.destroy();\n  }\n\n  public ngAfterViewInit(): void {\n\n    // NOTE if we don't have a file meaning that loading the image will happen synchronously we can safely\n    // call initializeCropper in ngAfterViewInit. otherwise if we are using the FileReader to load a base64 image\n    // we need to call onloadend asynchronously..\n    if (!this.state.File && this.state.ImageUrl) {\n      this.initializeCropper();\n    }\n  }\n\n  private handleStateConfig() {\n    this.state.ImageType = this.state.ImageType ? this.state.ImageType : 'image/jpeg';\n\n    if (this.state.ImageUrl) {\n      this.state.File      = null;\n      this.previewImageURL = this.state.ImageUrl;\n    }\n\n    if (this.state.File) {\n      this.state.ImageUrl = null;\n      this.convertFileToBase64(this.state.File);\n    }\n\n    if (this.state.AspectRatios) {\n      this.addRatios(this.state.AspectRatios);\n    } else {\n      this.ratios = NGX_DEFAULT_RATIOS;\n    }\n\n\n    if (!this.state.ImageUrl && !this.state.File) {\n      console.error(\"Property ImageUrl or File is missing, Please provide an url or file in the config options.\");\n    }\n\n    if (!this.state.ImageName) {\n      console.error(\"Property ImageName is missing, Please provide a name for the image.\");\n    }\n  }\n\n  private convertFileToBase64(file: File) {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", (e: any) => {\n      this.previewImageURL = e.target[\"result\"];\n    }, false);\n    reader.readAsDataURL(file);\n    reader.onloadend = (() => {\n      // NOTE since getting the base64 image url happens asynchronously we need to initializeCropper after\n      // the image has been loaded.\n      this.initializeCropper();\n    });\n  }\n\n  private addRatios(ratios: RatioType[]) {\n    this.ratios = [];\n    ratios.forEach((ratioType: RatioType) => {\n      const addedRation = NGX_DEFAULT_RATIOS.find((ratio: NgxAspectRatio) => {\n        return ratio.text === ratioType;\n      });\n      this.ratios.push(addedRation);\n    });\n  }\n\n  public handleCrop() {\n\n    this.loading = true;\n    setTimeout(() => {\n      this.croppedImage = this.cropper.getCroppedCanvas({fillColor: this.canvasFillColor})\n        .toDataURL(this.state.ImageType);\n\n      setTimeout(() => {\n        this.imageWidth  = this.croppedImg.nativeElement.width;\n        this.imageHeight = this.croppedImg.nativeElement.height;\n      });\n      this.cropper.getCroppedCanvas({fillColor: this.canvasFillColor}).toBlob((blob: Blob) => {\n        this.blob = blob;\n      });\n      this.zoomIn  = 1;\n      this.loading = false;\n    }, 2000);\n  }\n\n  public undoCrop() {\n    this.croppedImage = null;\n    this.blob         = null;\n    setTimeout(() => {\n      this.initializeCropper();\n    }, 100);\n\n  }\n\n  public saveImage() {\n    this.file.emit(new File([this.blob], this.state.ImageName, {type: this.state.ImageType}));\n  }\n\n  private initializeCropper() {\n    this.cropper = new Cropper(this.previewImage.nativeElement, {\n      zoomOnWheel: true,\n      viewMode: 0,\n      center: true,\n      ready: () => this.loading = false,\n      dragMode: 'move',\n      crop: (e: CustomEvent) => {\n        this.imageHeight   = Math.round(e.detail.height);\n        this.imageWidth    = Math.round(e.detail.width);\n        this.cropBoxWidth  = Math.round(this.cropper.getCropBoxData().width);\n        this.cropBoxHeight = Math.round(this.cropper.getCropBoxData().height);\n        this.canvasWidth   = Math.round(this.cropper.getCanvasData().width);\n        this.canvasHeight  = Math.round(this.cropper.getCanvasData().height);\n      }\n    });\n\n    this.setRatio(this.ratios[0].value);\n  }\n\n  public setRatio(value: any) {\n    this.cropper.setAspectRatio(value);\n  }\n\n  public zoomChange(input: any, zoom?: string) {\n    if (this.croppedImage) {\n      if (zoom) {\n        zoom === 'zoomIn' ? this.zoomIn += 0.1 : this.zoomIn -= 0.1;\n      } else {\n        if (input < this.sliderValue) {\n          this.zoomIn = -Math.abs(input / 100);\n        } else {\n          this.zoomIn = Math.abs(input / 100);\n        }\n      }\n      if (this.zoomIn <= 0.1) {\n        this.zoomIn = 0.1;\n      }\n    } else {\n      if (zoom) {\n        this.cropper.zoom(input);\n        this.zoomIn = input;\n      } else {\n        if (input < this.sliderValue) {\n          this.cropper.zoom(-Math.abs(input / 100));\n        } else {\n          this.cropper.zoom(Math.abs(input / 100));\n        }\n        if (input === 0) {\n          this.cropper.zoom(-1);\n        }\n      }\n    }\n\n    if (!zoom) {\n      this.sliderValue = input;\n    } else {\n      input > 0 ? this.sliderValue += Math.abs(input * 100) : this.sliderValue -= Math.abs(input * 100);\n    }\n\n    if (this.sliderValue < 0) {\n      this.sliderValue = 0;\n    }\n  }\n\n  public setImageWidth(canvasWidth: number) {\n    if (canvasWidth) {\n      this.cropper.setCanvasData({\n        left: this.cropper.getCanvasData().left,\n        top: this.cropper.getCanvasData().top,\n        width: Math.round(canvasWidth),\n        height: this.cropper.getCanvasData().height\n      });\n    }\n  }\n\n  public setImageHeight(canvasHeight: number) {\n    if (canvasHeight) {\n      this.cropper.setCanvasData({\n        left: this.cropper.getCanvasData().left,\n        top: this.cropper.getCanvasData().top,\n        width: this.cropper.getCanvasData().width,\n        height: Math.round(canvasHeight)\n      });\n    }\n  }\n\n  public setCropBoxWidth(cropBoxWidth: number) {\n    if (cropBoxWidth) {\n      this.cropper.setCropBoxData({\n        left: this.cropper.getCropBoxData().left,\n        top: this.cropper.getCropBoxData().top,\n        width: Math.round(cropBoxWidth),\n        height: this.cropper.getCropBoxData().height\n      });\n    }\n  }\n\n  public setCropBoxHeight(cropBoxHeight: number) {\n    if (cropBoxHeight) {\n      this.cropper.setCropBoxData({\n        left: this.cropper.getCropBoxData().left,\n        top: this.cropper.getCropBoxData().top,\n        width: this.cropper.getCropBoxData().width,\n        height: Math.round(cropBoxHeight)\n      });\n    }\n  }\n\n  public centerCanvas() {\n    const cropBoxLeft = (this.cropper.getContainerData().width - this.cropper.getCropBoxData().width) / 2;\n    const cropBoxTop  = (this.cropper.getContainerData().height - this.cropper.getCropBoxData().height) / 2;\n    const canvasLeft  = (this.cropper.getContainerData().width - this.cropper.getCanvasData().width) / 2;\n    const canvasTop   = (this.cropper.getContainerData().height - this.cropper.getCanvasData().height) / 2;\n\n    this.cropper.setCropBoxData({\n      left: cropBoxLeft,\n      top: cropBoxTop,\n      width: this.cropper.getCropBoxData().width,\n      height: this.cropper.getCropBoxData().height\n    });\n    this.cropper.setCanvasData({\n      left: canvasLeft,\n      top: canvasTop,\n      width: this.cropper.getCanvasData().width,\n      height: this.cropper.getCanvasData().height\n    });\n  }\n\n}\n\n\nexport interface IEditorOptions {\n  ImageName: string;\n  ImageUrl?: string;\n  ImageType?: string;\n  File?: File;\n  AspectRatios?: Array<RatioType>;\n}\n\nexport type RatioType = \"16:9\" | '4:3' | '1:1' | '2:3' | 'Default';\n\nexport class EditorOptions implements IEditorOptions {\n  ImageName: string;\n  ImageUrl?: string;\n  ImageType?: string;\n  File?: File;\n  AspectRatios?: Array<RatioType>;\n}\n\n\nexport interface NgxAspectRatio {\n  value: number;\n  text: RatioType;\n}\n\n\n\nexport const NGX_DEFAULT_RATIOS: Array<NgxAspectRatio> = [\n  {\n    value: 16 / 9, text: '16:9'\n  },\n  {\n    value: 4 / 3, text: '4:3'\n  },\n  {\n    value: 1 / 1, text: '1:1'\n  },\n  {\n    value: 2 / 3, text: '2:3'\n  },\n  {\n    value: 0 / 0, text: 'Default'\n  }\n];\n"
  ],
  "names": [],
  "mappings": "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"
}
